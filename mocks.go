// AUTOGENERATED FILE

// +build !codeanalysis

package fhirhose

import "github.com/stretchr/testify/mock"

// ErrHandlerFuncMock is an autogenerated mock type for the ErrHandlerFunc type
type ErrHandlerFuncMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *ErrHandlerFuncMock) Execute(_a0 Error) {
	_m.Called(_a0)
}

// IRegisterMock is an autogenerated mock type for the IRegister type
type IRegisterMock struct {
	mock.Mock
}

// Pollers provides a mock function with given fields: _a0, _a1, _a2
func (_m *IRegisterMock) Pollers(_a0 Config, _a1 []IStream, _a2 *chan Error) {
	_m.Called(_a0, _a1, _a2)
}

// Retrievers provides a mock function with given fields: _a0, _a1, _a2
func (_m *IRegisterMock) Retrievers(_a0 Config, _a1 []IStream, _a2 *chan Error) {
	_m.Called(_a0, _a1, _a2)
}

// Transformers provides a mock function with given fields: _a0, _a1, _a2
func (_m *IRegisterMock) Transformers(_a0 Config, _a1 []IStream, _a2 *chan Error) {
	_m.Called(_a0, _a1, _a2)
}

// Uploaders provides a mock function with given fields: _a0, _a1, _a2
func (_m *IRegisterMock) Uploaders(_a0 Config, _a1 []IStream, _a2 *chan Error) {
	_m.Called(_a0, _a1, _a2)
}

// IStreamMock is an autogenerated mock type for the IStream type
type IStreamMock struct {
	mock.Mock
}

// GetStreamName provides a mock function with given fields:
func (_m *IStreamMock) GetEventType() StreamName {
	ret := _m.Called()

	var r0 StreamName
	if rf, ok := ret.Get(0).(func() StreamName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(StreamName)
	}

	return r0
}

// Poll provides a mock function with given fields:
func (_m *IStreamMock) Poll() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: _a0
func (_m *IStreamMock) Retrieve(_a0 string) (string, []byte, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(string) []byte); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Transform provides a mock function with given fields: _a0, _a1
func (_m *IStreamMock) Transform(_a0 string, _a1 []byte) (string, []byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []byte) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(string, []byte) []byte); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, []byte) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

//// Upload provides a mock function with given fields: _a0, _a1
//func (_m *IStreamMock) Upload(inputID string, inputData []byte) (string, error, bool) {
//	ret := _m.Called(inputID, inputData)
//
//	var r0 string
//	if rf, ok := ret.Get(0).(func(string, []byte) string); ok {
//		r0 = rf(inputID, inputData)
//	} else {
//		r0 = ret.Get(0).(string)
//	}
//
//	var r1 error
//	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
//		r1 = rf(inputID, inputData)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1, outputProcess
//}
