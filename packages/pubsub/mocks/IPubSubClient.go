// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mocks

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// IPubSubClient is an autogenerated mock type for the IPubSubClient type
type IPubSubClient struct {
	mock.Mock
}

// Consume provides a mock function with given fields: consumer, stream, cb
func (_m *IPubSubClient) Consume(consumer, stream string, cb func(*nats.Msg)) error {
	ret := _m.Called(consumer, stream, cb)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, func(*nats.Msg)) error); ok {
		r0 = rf(consumer, stream, cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: subj, data
func (_m *IPubSubClient) Publish(subj string, data []byte) error {
	ret := _m.Called(subj, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(subj, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: subj, cb
func (_m *IPubSubClient) Subscribe(subj string, cb nats.MsgHandler) (*nats.Subscription, error) {
	ret := _m.Called(subj, cb)

	var r0 *nats.Subscription
	if rf, ok := ret.Get(0).(func(string, nats.MsgHandler) *nats.Subscription); ok {
		r0 = rf(subj, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, nats.MsgHandler) error); ok {
		r1 = rf(subj, cb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
